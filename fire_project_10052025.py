# -*- coding: utf-8 -*-
"""Fire Project 10052025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aUZY2IZkBGk6YbuhLNKpEVUpO67WxJS7
"""

import cv2
import numpy as np
from flask import Flask, Response, request, jsonify
import threading
import time
from twilio.rest import Client
import firebase_admin
from firebase_admin import credentials, messaging
from ultralytics import YOLO
import requests

# Initialize Flask
app = Flask(__name__)

from ultralytics import YOLO

# ======================
# CONFIGURATION
# ======================
TWILIO_SID = "your_twilio_sid"
TWILIO_TOKEN = "your_twilio_token"
FCM_CREDENTIALS = "path/to/firebase-key.json"

# Load YOLOv8 model (official Ultralytics implementation)
model = YOLO("yolov8n.pt")  # Nano version (fastest)

CLASS_MAP = {
    0: "person",
    # These are common class IDs for fire-related objects in custom-trained models
    # You'll need to train your own model or use these placeholder IDs
    25: "fire",
    26: "smoke",
    27: "flames"
}

import cv2
import streamlit as st
from ultralytics import YOLO
import numpy as np

# Set page config
st.set_page_config(
    page_title="Fire Detection System",
    page_icon="ðŸ”¥",
    layout="wide"
)

# Title and description
st.title("ðŸ”¥ Real-Time Fire Detection")
st.markdown("""
    <style>
        .reportview-container {
            background: #f0f2f6
        }
        .sidebar .sidebar-content {
            background: #ffffff
        }
    </style>
""", unsafe_allow_html=True)

# Load YOLO model
@st.cache_resource
def load_model():
    return YOLO("yolov8n.pt")  # Auto-downloads if not found

model = load_model()

# Camera selection
camera_option = st.sidebar.radio(
    "Select Camera Source:",
    ("Webcam", "Mobile Camera", "IP Camera")
)

# Confidence threshold
conf_threshold = st.sidebar.slider(
    "Detection Confidence Threshold",
    0.1, 1.0, 0.5, 0.01
)

# Initialize video capture
cap = None
if camera_option == "Webcam":
    cap = cv2.VideoCapture(0)
elif camera_option == "Mobile Camera":
    cap = cv2.VideoCapture("http://192.168.X.X:8080/video")  # Replace with your IP Webcam URL
else:
    ip_cam_url = st.sidebar.text_input("Enter IP Camera URL:")
    if ip_cam_url:
        cap = cv2.VideoCapture(ip_cam_url)

# Create placeholder for video
video_placeholder = st.empty()
status_text = st.empty()

# Detection loop
if cap is not None:
    while True:
        ret, frame = cap.read()
        if not ret:
            status_text.warning("Failed to capture video feed")
            break

        # Perform detection
        results = model(frame, conf=conf_threshold, verbose=False)

        # Visualize results
        annotated_frame = results[0].plot()
        annotated_frame = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)

        # Display in Streamlit
        video_placeholder.image(annotated_frame, channels="RGB", use_column_width=True)

        # Check for fire detection
        fire_detected = any(int(box.cls) in [25, 26, 27] for box in results[0].boxes)
        if fire_detected:
            status_text.error("ðŸš¨ FIRE DETECTED! Please evacuate immediately!")
        else:
            status_text.success("âœ… No fire detected")
else:
    st.warning("Please select a valid camera source")

# Release resources when done
if cap is not None:
    cap.release()